name: Deploy to Staging

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup environment
        run: |
          cp env.example .env.test
          echo "DATABASE_URL=mysql://root:test_password@localhost:3306/test_db" >> .env.test
          echo "DATABASE_URL_UNPOOLED=mysql://root:test_password@localhost:3306/test_db" >> .env.test
          echo "JWT_SECRET=test_secret" >> .env.test
          echo "NEXTAUTH_SECRET=test_secret" >> .env.test
      
      - name: Generate Prisma client
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/test_db
          DATABASE_URL_UNPOOLED: mysql://root:test_password@localhost:3306/test_db
        run: npx prisma generate
      
      - name: Run database migrations
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/test_db
          DATABASE_URL_UNPOOLED: mysql://root:test_password@localhost:3306/test_db
        run: npx prisma db push
      
      - name: Run tests
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/test_db
          DATABASE_URL_UNPOOLED: mysql://root:test_password@localhost:3306/test_db
        run: npm test
      
      - name: Build application
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/test_db
          DATABASE_URL_UNPOOLED: mysql://root:test_password@localhost:3306/test_db
        run: npm run build

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Docker image
        run: docker build -t historian-app:staging .
      
      - name: Deploy to staging server
        run: |
          # This would typically involve:
          # 1. Pushing to a container registry
          # 2. SSH to staging server
          # 3. Pull and restart containers
          echo "Deploying to staging server..."
          # ssh user@staging-server "cd /path/to/app && ./deploy.sh staging up" 
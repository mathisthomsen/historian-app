name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Lint and Type check
        run: |
          npm run lint &
          npm run type-check &
          wait

      - name: Run tests
        run: npm test

      - name: Build application (skip for faster deployment)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_URL_UNPOOLED: ${{ secrets.DATABASE_URL_UNPOOLED }}
          NODE_ENV: production
          NEXT_PUBLIC_STRAPI_URL: https://evidoxa.com/strapi
          NEXT_PUBLIC_IS_STAGING: false
        run: echo "Skipping local build - will build on VPS for faster deployment"

      - name: Ping server
        run: |
          echo "Pinging server 217.154.198.215..."
          ping -c 4 217.154.198.215 || (echo "Ping failed! Server may be down or unreachable." && exit 1)

      # --- IMPORTANT: If you have a firewall or cloud security group, make sure to allow SSH (port 22) from GitHub Actions IPs. See:
      # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-githubs-ip-addresses

      - name: Prepare SSH known_hosts
        run: |
          rm -f ~/.ssh/known_hosts
          ssh-keyscan -H 217.154.198.215 >> ~/.ssh/known_hosts

      - name: Set up SSH
        run: |
          # Debug: Check current directory and permissions
          pwd
          ls -la ~/
          
          # Create SSH directory with error handling
          mkdir -p ~/.ssh || echo "Failed to create .ssh directory"
          ls -la ~/.ssh || echo "SSH directory not created"
          
          # Check if SSH key secret exists
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "ERROR: VPS_SSH_KEY secret is not set!"
            exit 1
          fi
          
          # Write SSH key with error handling
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa || echo "Failed to write SSH key"
          chmod 600 ~/.ssh/id_rsa || echo "Failed to set SSH key permissions"
          
          # Create SSH config
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "    ServerAliveInterval=60" >> ~/.ssh/config
          echo "    ServerAliveCountMax=3" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Debug: Check SSH files
          ls -la ~/.ssh/
          
          # Test SSH connection
          echo "Testing SSH connection to root@217.154.198.215..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@217.154.198.215 'echo "SSH connection successful!"' || (echo "SSH connection failed!" && exit 1)

      - name: Copy files to VPS
        run: |
          rsync -avz --delete --exclude '.git' --exclude 'node_modules' --exclude '.next' --exclude 'dist' --exclude 'build' --exclude 'logs' --exclude 'test-results' --exclude 'playwright-report' ./ root@217.154.198.215:/opt/historian-app/production

      - name: Write .env.production on server
        run: |
          ssh root@217.154.198.215 "cat > /opt/historian-app/production/.env.production << 'EOF'
          AUTHKIT_REDIRECT_URI=${{ secrets.AUTHKIT_REDIRECT_URI }}
          DOMAIN=${{ secrets.DOMAIN }}
          SSL_EMAIL=${{ secrets.SSL_EMAIL }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_URL_UNPOOLED=${{ secrets.DATABASE_URL_UNPOOLED }}
          ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          ADMIN_JWT_SECRET=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}
          ADMIN_API_TOKEN_SALT=${{ secrets.STRAPI_API_TOKEN_SALT }}
          APP_KEYS=${{ secrets.STRAPI_APP_KEYS }}
          DATABASE_HOST=${{ secrets.STRAPI_DB_HOST }}
          DATABASE_NAME=${{ secrets.STRAPI_DB_NAME }}
          DATABASE_PASSWORD=${{ secrets.STRAPI_DB_PASSWORD }}
          DATABASE_USERNAME=${{ secrets.STRAPI_DB_USER }}
          # Email Configuration
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          # NextAuth Configuration
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          # API Configuration
          API_RATE_LIMIT_WINDOW_MS=60000
          API_RATE_LIMIT_MAX_REQUESTS=50
          # Cache Configuration
          CACHE_TTL_MS=300000
          # Production Settings
          NODE_ENV=production
          DEBUG=false
          LOG_LEVEL=warn
          # File Upload
          MAX_FILE_SIZE=10485760
          ALLOWED_FILE_TYPES=".csv,.xlsx,.json"
          EOF"

      - name: Deploy on VPS
        run: |
          ssh root@217.154.198.215 "cd /opt/historian-app/production && docker-compose -f docker-compose.production.yml down --remove-orphans && docker rm -f historian-redis historian-certbot historian-app historian-strapi historian-nginx 2>/dev/null || true && DATABASE_URL='${{ secrets.DATABASE_URL }}' DATABASE_URL_UNPOOLED='${{ secrets.DATABASE_URL_UNPOOLED }}' REDIS_PASSWORD='${{ secrets.REDIS_PASSWORD }}' docker-compose -f docker-compose.production.yml build --no-cache --build-arg DATABASE_URL='${{ secrets.DATABASE_URL }}' --build-arg DATABASE_URL_UNPOOLED='${{ secrets.DATABASE_URL_UNPOOLED }}' --build-arg RESEND_API_KEY='${{ secrets.RESEND_API_KEY }}' && docker-compose -f docker-compose.production.yml up -d"

      - name: Wait for containers to be ready
        run: |
          ssh root@217.154.198.215 "sleep 30 && docker-compose -f /opt/historian-app/production/docker-compose.production.yml ps"

      - name: Setup SSL certificates
        run: |
          ssh root@217.154.198.215 "cd /opt/historian-app/production && ./deploy-production.sh ssl"

      - name: Check deployment status
        run: |
          ssh root@217.154.198.215 'docker-compose -f /opt/historian-app/production/docker-compose.production.yml ps'

      - name: Health check
        run: |
          ssh root@217.154.198.215 'sleep 15 && curl -f https://evidoxa.com/api/health || curl -f http://localhost:3000/api/health || curl -f http://localhost/api/health || echo "Health check failed, but deployment may still be successful"'

      - name: Show container logs if health check fails
        if: failure()
        run: |
          ssh root@217.154.198.215 'docker-compose -f /opt/historian-app/production/docker-compose.production.yml logs --tail=50' 
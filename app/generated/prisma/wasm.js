
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.EmailConfirmationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.EventsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  date: 'date',
  end_date: 'end_date',
  location: 'location'
};

exports.Prisma.Event_typesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  icon: 'icon',
  color: 'color'
};

exports.Prisma.Life_eventsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  person_id: 'person_id',
  event_id: 'event_id',
  title: 'title',
  start_date: 'start_date',
  end_date: 'end_date',
  location: 'location',
  description: 'description',
  metadata: 'metadata',
  event_type_id: 'event_type_id'
};

exports.Prisma.PersonsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  first_name: 'first_name',
  last_name: 'last_name',
  birth_date: 'birth_date',
  birth_place: 'birth_place',
  death_date: 'death_date',
  death_place: 'death_place',
  notes: 'notes'
};

exports.Prisma.Person_relationsScalarFieldEnum = {
  id: 'id',
  from_person_id: 'from_person_id',
  to_person_id: 'to_person_id',
  relation_type: 'relation_type',
  notes: 'notes'
};

exports.Prisma.LiteratureScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  author: 'author',
  publicationYear: 'publicationYear',
  type: 'type',
  description: 'description',
  url: 'url',
  publisher: 'publisher',
  journal: 'journal',
  volume: 'volume',
  issue: 'issue',
  pages: 'pages',
  doi: 'doi',
  isbn: 'isbn',
  issn: 'issn',
  language: 'language',
  keywords: 'keywords',
  abstract: 'abstract',
  externalId: 'externalId',
  syncSource: 'syncSource',
  lastSyncedAt: 'lastSyncedAt',
  syncMetadata: 'syncMetadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BibliographySyncScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  service: 'service',
  name: 'name',
  isActive: 'isActive',
  apiKey: 'apiKey',
  apiSecret: 'apiSecret',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  tokenExpiresAt: 'tokenExpiresAt',
  collectionId: 'collectionId',
  collectionName: 'collectionName',
  autoSync: 'autoSync',
  syncInterval: 'syncInterval',
  lastSyncAt: 'lastSyncAt',
  syncMetadata: 'syncMetadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  name: 'name',
  password: 'password'
};

exports.Prisma.EmailConfirmationOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.PasswordResetOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.RefreshTokenOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.eventsOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  location: 'location'
};

exports.Prisma.event_typesOrderByRelevanceFieldEnum = {
  name: 'name',
  icon: 'icon',
  color: 'color'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.life_eventsOrderByRelevanceFieldEnum = {
  title: 'title',
  location: 'location',
  description: 'description'
};

exports.Prisma.personsOrderByRelevanceFieldEnum = {
  first_name: 'first_name',
  last_name: 'last_name',
  birth_place: 'birth_place',
  death_place: 'death_place',
  notes: 'notes'
};

exports.Prisma.person_relationsOrderByRelevanceFieldEnum = {
  relation_type: 'relation_type',
  notes: 'notes'
};

exports.Prisma.literatureOrderByRelevanceFieldEnum = {
  title: 'title',
  author: 'author',
  type: 'type',
  description: 'description',
  url: 'url',
  publisher: 'publisher',
  journal: 'journal',
  volume: 'volume',
  issue: 'issue',
  pages: 'pages',
  doi: 'doi',
  isbn: 'isbn',
  issn: 'issn',
  language: 'language',
  keywords: 'keywords',
  abstract: 'abstract',
  externalId: 'externalId',
  syncSource: 'syncSource'
};

exports.Prisma.BibliographySyncOrderByRelevanceFieldEnum = {
  service: 'service',
  name: 'name',
  apiKey: 'apiKey',
  apiSecret: 'apiSecret',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  collectionId: 'collectionId',
  collectionName: 'collectionName'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  EmailConfirmation: 'EmailConfirmation',
  PasswordReset: 'PasswordReset',
  RefreshToken: 'RefreshToken',
  events: 'events',
  event_types: 'event_types',
  life_events: 'life_events',
  persons: 'persons',
  person_relations: 'person_relations',
  literature: 'literature',
  BibliographySync: 'BibliographySync'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

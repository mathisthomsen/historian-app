'use strict';const {PrismaClient}=require("./app/generated/prisma"),prisma=new PrismaClient;
async function testPrisma(){try{console.log("Testing Prisma client...");await prisma.$connect();console.log("\u2705 Connected to database");const b=await prisma.user.findMany({select:{id:!0,email:!0}});console.log("\u2705 Users query successful:",b.length,"users found");const c=await prisma.persons.findMany({where:{userId:4},select:{id:!0,first_name:!0}});console.log("\u2705 Persons query successful:",c.length,"persons found");const d=await prisma.events.findMany({where:{userId:4},select:{id:!0,title:!0}});
console.log("\u2705 Events query successful:",d.length,"events found");const e=await prisma.life_events.findMany({where:{userId:4},select:{id:!0,title:!0}});console.log("\u2705 Life events query successful:",e.length,"life events found");const f=await prisma.literature.findMany({where:{userId:4},select:{id:!0,title:!0}});console.log("\u2705 Literature query successful:",f.length,"literature found");const a=await Promise.all([prisma.persons.count({where:{userId:4}}),prisma.events.count({where:{userId:4}}),
prisma.life_events.count({where:{userId:4}}),prisma.literature.count({where:{userId:4}})]);console.log("\u2705 Counts successful:",{persons:a[0],events:a[1],lifeEvents:a[2],literature:a[3]})}catch(b){console.error("\u274c Error:",b)}finally{await prisma.$disconnect()}}testPrisma();
services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=${DATABASE_URL}
        - DATABASE_URL_UNPOOLED=${DATABASE_URL_UNPOOLED}
        - RESEND_API_KEY=${RESEND_API_KEY}
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    container_name: historian-app
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs/production:/app/logs
    depends_on:
      - redis
    networks:
      - historian-network

  # Strapi CMS
  strapi:
    build:
      context: ./strapi
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 1G
    container_name: historian-strapi
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_CLIENT=postgres
      - DATABASE_URL=
      - DATABASE_SSL=true
      - PGSSLMODE=require
    volumes:
      - ./logs/strapi:/opt/app/logs
      - ./uploads:/opt/app/public/uploads
    networks:
      - historian-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: historian-redis
    restart: unless-stopped
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - historian-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: historian-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.active.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-www:/var/www/certbot
    depends_on:
      - app
      - strapi
    networks:
      - historian-network

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: historian-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email $SSL_EMAIL --agree-tos --no-eff-email -d $DOMAIN --staging
    networks:
      - historian-network

volumes:
  redis_data:
  certbot-etc:
  certbot-www:

networks:
  historian-network:
    driver: bridge 
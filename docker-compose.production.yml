version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        DATABASE_URL: ${DATABASE_URL}
        DATABASE_URL_UNPOOLED: ${DATABASE_URL_UNPOOLED}
    container_name: historian_app_production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_UNPOOLED=${DATABASE_URL_UNPOOLED}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - API_RATE_LIMIT_WINDOW_MS=${API_RATE_LIMIT_WINDOW_MS}
      - API_RATE_LIMIT_MAX_REQUESTS=${API_RATE_LIMIT_MAX_REQUESTS}
      - CACHE_TTL_MS=${CACHE_TTL_MS}
      - REDIS_URL=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=${LOG_LEVEL}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES}
      - MENDELEY_CLIENT_ID=${MENDELEY_CLIENT_ID}
      - MENDELEY_CLIENT_SECRET=${MENDELEY_CLIENT_SECRET}
      - MENDELEY_REDIRECT_URI=${MENDELEY_REDIRECT_URI}
      - WORKOS_API_KEY=${WORKOS_API_KEY}
      - WORKOS_CLIENT_ID=${WORKOS_CLIENT_ID}
      - WORKOS_REDIRECT_URI=${WORKOS_REDIRECT_URI}
      - WORKOS_COOKIE_PASSWORD=${WORKOS_COOKIE_PASSWORD}
      - AUTHKIT_REDIRECT_URI=${AUTHKIT_REDIRECT_URI}
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost, nginx will proxy
    depends_on:
      - strapi
    networks:
      - historian_production_network
    volumes:
      - ./uploads/production:/app/uploads
      - ./logs/production:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Strapi CMS
  strapi:
    image: strapi/strapi
    platform: linux/amd64
    container_name: strapi_production
    restart: unless-stopped
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: ${STRAPI_DB_HOST}
      DATABASE_PORT: 5432
      DATABASE_NAME: ${STRAPI_DB_NAME}
      DATABASE_USERNAME: ${STRAPI_DB_USER}
      DATABASE_PASSWORD: ${STRAPI_DB_PASSWORD}
      DATABASE_SSL: 'true'
      JWT_SECRET: ${STRAPI_JWT_SECRET}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET}
      APP_KEYS: ${STRAPI_APP_KEYS}
      API_TOKEN_SALT: ${STRAPI_API_TOKEN_SALT}
      NODE_ENV: production
    ports:
      - "127.0.0.1:1337:1337"  # Only bind to localhost, nginx will proxy
    volumes:
      - ./strapi:/srv/app
      - ./uploads/strapi:/srv/app/public/uploads
      - ./logs/strapi:/srv/app/logs
    networks:
      - historian_production_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional, for better performance)
  redis:
    image: redis:7-alpine
    container_name: historian_redis_production
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - historian_production_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: historian_nginx_production
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
      - strapi
    networks:
      - historian_production_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: historian_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${SSL_EMAIL} -d ${DOMAIN} --agree-tos --non-interactive
    depends_on:
      - nginx
    networks:
      - historian_production_network
    profiles:
      - ssl

volumes:
  redis_data:

networks:
  historian_production_network:
    driver: bridge 